# b Beginning of line
# i In-word expansion
# w Word boundary 
# r Regular expression 
# t Do not expand tabs

snippet php
<?php
namespace ${1:App};

/**
 * ${3:Comment}
 */
class ${2:ClassName}
{
	public function __construct()
	{
		$0
	}
}
endsnippet

snippet if "if" b
if (${1}) {
	${0}
}
endsnippet

snippet ife "if/else" b
if (${1:cond}) {
	${2}
} else {
	${3}
}
endsnippet

snippet ifels "if/elseif" b
if (${1:cond}) {
	${0}
} elseif (${2}) {
} else {
}
endsnippet

snippet /// "multiline comment" b
/**
 *${0}
 */
endsnippet

snippet prv "private member" b
/**
 * @var $$1 ${2:type}
 */
private $${1:variable};${0}
endsnippet

snippet a[ "array" i
[${1}]${0}
endsnippet

snippet ak "Array key" i
'${1}' => ${2},
endsnippet

snippet cf "date format" i
->format('${1:Y-m-d}')
endsnippet

snippet func "function" b
/**
 * ${4}
 */
${1:public} function ${2:name}(${3})
{
	${0}
}
endsnippet

snippet funcl "closure" i
function ($1) {
	$0
}${2:);}
endsnippet

snippet funclu "closure with use parameter" i
function ($1) use ($2) {
	$0
}${3:);}
endsnippet

snippet ifn "if null" b
if ($${1:var} === null) {
	${0}
}
endsnippet

snippet ifnn "if not null" b
if ($${1:var} !== null) {
	${0}
}
endsnippet

snippet unless "if not" b
if (!${1}) {
	${0}
}
endsnippet

snippet tt "$this->" i
$this->
endsnippet

snippet tv "$this->variable" b
$this->${1}
endsnippet

snippet tva "$this->variable assign"
$this->${1} = $$1;
endsnippet

snippet tvaa "$this->variable assign"
$this->${1} = $${2};
endsnippet

snippet tma "$this->method assign"
$${1} = $this->${2}(${3});
endsnippet

snippet tm "$this->method()"
$this->${1:method}(${2});${0}
endsnippet

snippet ma "method assign"
$${1:val} = $${2:obj}->${3:method}(${4});${0}
endsnippet

# PHP Exception
snippet tryc "try/catch" b
try {
	${0}
} catch (\Exception $ex) {
	throw $ex;
}
endsnippet

snippet tryf "try/catch/finally" b
try {
	${0}
} catch (\Exception $ex) {
	throw $ex;
} finally {
}
endsnippet

snippet te "throw new Exception"
throw new \Exception("${1}");${0}
endsnippet

snippet ex "throw Exception" b
throw new \Exception("${0}", ${1:0}, $ex);
endsnippet

# JSON
snippet jsond "JSON decode" b
$json = json_decode($${1}, 1);
endsnippet

snippet jsonde "JSON decode with error handler" b
$json = json_decode($${1}, 1);
if (($err = json_last_error()) !== JSON_ERROR_NONE) {
	throw new \Exception("${1} (json_last_error() => {$err})");
}
endsnippet

# PHPUnit snippets
snippet setup
public function setUp(): void
{
	parent::setUp();${0}
}
endsnippet

snippet test "test function" b
public function test${1}()
{
	${0}
}
endsnippet

snippet assT "assertTrue" b
$this->assertTrue(${0});
endsnippet

snippet assF "assertFalse" b
$this->assertFalse(${0});
endsnippet

snippet assE "assertEquals" b
$this->assertEquals(${1}, ${0});
endsnippet

snippet assN "assertNull" b
$this->assertNull(${0})
endsnippet

snippet assNN "assertNotNull" b
$this->assertNotNull(${0})
endsnippet

snippet doccon "PHPDoc constructor"
/**
 * コンストラクタ$0
 */
endsnippet

snippet docm "PHPDoc method"
/**
 *
 * @return ${1}
 */
endsnippet

snippet docvar
/**
 * @var ${1:type} ${2}
 */
endsnippet

snippet docp "PHPDoc @param" w
@param ${1:type} $${2:var} ${3}
endsnippet

snippet docr "PHPDoc @return" w
@return ${1:type} ${2}
endsnippet

snippet funcps "public static function"
public static function ${1}(${2})
{
	$0
}
endsnippet

snippet funcpv "private function"
private function ${1}(${2})
{
	$0
}
endsnippet

snippet funcpr "protected function"
protected function ${1}(${2})
{
	$0
}
endsnippet

snippet getter
public function get${1}()
{
	return $this->`!p snip.rv = t[1].lower()`;
}
endsnippet

snippet setter
public function set${1}($`!p snip.rv = t[1].lower()`)
{
	$this->`!p snip.rv = t[1].lower()` = $`!p snip.rv = t[1].lower()`;
}
endsnippet

snippet aset "Array set"
\$${1}['${2}'] = ${3};
endsnippet

snippet swi "switch"
switch (${1}) {
	case ${2}:
		$0
		break;
	default:
}
endsnippet

snippet class_methods "Get class methods"
dd(get_class_methods($${1:obj}));
endsnippet

snippet arrmap "array map"
collect($${1:array})->map(function ($${2:item}) {
	${0}
});
endsnippet

snippet rt "return"
return ${1};
endsnippet

snippet var "@var comment"
/** @var ${1:Class} $${2:variable} */
endsnippet

snippet nw "Create new instance" i
\$`!p snip.rv = t[1].lower()` = new ${1:Class}(${2});
endsnippet

