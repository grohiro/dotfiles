# b Beginning of line
# i In-word expansion
# w Word boundary

snippet nodejs
'use strict';
$0
endsnippet

snippet lambda
'use strict';

exports.handler = (event, context, callback) => {
	$0
};
endsnippet

snippet ff "arrow function" i
(${1}) => {
	${2}
}
endsnippet

snippet ffa "async arrow function" i
async (${1}) => {
	${2}
}
endsnippet

snippet func "function" i
function $1($2) {
	$0
}
endsnippet

snippet funcl
($1) => {
	$0
}
endsnippet

snippet funclf
function() {
});
endsnippet

snippet jqclick
$('$1').click(function(event) {
	$0
});
endsnippet

snippet jqchange
$('$1').change(function(event) {
	$0
});
endsnippet

snippet jq
$('$1')$0
endsnippet

snippet jqt
$(this)$0
endsnippet

snippet if "if"
if ($1) {
	$0
}
endsnippet

snippet ife
if ($1) {
} else {
}
endsnippet

snippet elif
if ($1) {
} else if ($2) {
} else {
}
endsnippet

snippet ifnull
if (${1} == null) {
	$0
}
endsnippet

snippet ifnnull
if (${1} != null) {
	$0
}
endsnippet

snippet unless
if (!${1}) {
	$0
}
endsnippet

snippet el
document.querySelector('${1}');
endsnippet

snippet eclick "click event"
${1}.addEventListener('click', (event) => {
	${3}
});
endsnippet

snippet echange "change event"
${1}.addEventListener('change', (event) => {
	${3}
});
endsnippet

snippet elis "add event listener"
${1}.addEventListener('${2}', (event) => {
	${3}
});
endsnippet

snippet constr "constructore" b
constructor() {
}
endsnippet

snippet re-bind "bind `this` to React event handler"
this.${1} = this.$1.bind(this)
endsnippet

snippet re-compo "React Component"
import {React} from 'react'

export class ${1} extends React.Component {
	constructor(props) {
		super(props)
	}

	render() {
		return (
			<div>
				${2:Your component here}
			</div>
		)
	}
}
endsnippet

snippet re-cons "React constructor"
constructor(props) {
	super(props)
}
endsnippet

snippet imp "import"
import {${1}} from '${2}'
endsnippet

snippet clog "console.log"
console.log(${1});${0}
endsnippet

snippet va "variable"
let ${1:var} = ${2:value}${0}
endsnippet

snippet co "const"
const ${1:var} = ${2:value}${0}
endsnippet

snippet oj "object" i
{
	${1:key}: ${2:value},
}
endsnippet

snippet ass "Object.assign()"
Object.assign(${1:\{\}}, ${2})${0}
endsnippet

snippet keyfor "Object.keys()"
Object.keys(${1}).forEach((key) => {
	let value = $1[key]
})
endsnippet

snippet req "require"
const $1 = require('${1}')${0}
endsnippet
