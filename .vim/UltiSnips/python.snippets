snippet py "Python template"
# coding:utf-8

class ${1:Sample}(${2}):
	$0
endsnippet

snippet testc "TestClass"
import unittest

class ${1:Sample}Test(unittest.TestCase):
	def setUp(self):
		pass

	def tearDown(self):
		pass

	def test_sample(self):
		self.assertEqual(1, 1)

if __name__ == "__main__":
	unittest.main()

endsnippet

snippet assT "assertTrue"
self.assertTrue(${1:True})
endsnippet

snippet assF "assertFalse"
self.assertFalse(${1:False})
endsnippet

snippet assE "assertEqual"
self.assertEqual(${1}, ${2})$0
endsnippet

snippet assNE "assertNotEqual"
self.assertNotEqual(${1}, ${2})$0
endsnippet

snippet assI "assertIs"
self.assertIs(${1}, ${2})$0
endsnippet

snippet assIN "assertIsNot"
self.assertIsNot(${1}, ${2})$0
endsnippet

snippet assN "assertIsNone"
self.assertIsNone(${1})$0
endsnippet

snippet assNN "assertIsNotNone"
self.assertIsNotNone(${1})$0
endsnippet

snippet ma "main run"
if __name__ == "__main__":
	print('run')
endsnippet

snippet cls "class"
class ${1:Sample}():
	$0
endsnippet

snippet meth "method"
def ${1:method}(self${2}):
	$0
endsnippet

snippet methc "method with comment"
# ${3:comment}
def ${1:method}(self${2}):
	$0
endsnippet

snippet test "test method"
def test_${1:name}(self):
	self.assertTrue(True)
endsnippet

snippet in "__init__"
def __init__(self${1}):
	pass
endsnippet	
